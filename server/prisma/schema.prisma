generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      String   @id
  created DateTime @default(now())
  updated DateTime @updatedAt

  email     String   @unique
  firstName String?
  lastName  String?
  school    School
  classOf   Int
  bio       String?
  avatarId  String?
  avatar    Storage? @relation("avatar", fields: [avatarId], references: [id])
  bannerId  String?
  banner    Storage? @relation("banner", fields: [bannerId], references: [id])

  /// [monday, tuesday, wednesday, thursday, friday, a days, b days]
  /// where each day is an object `{ p5: boolean, p6: boolean }`
  campusAvailability Json

  /// [sunday, monday, tuesday, wednesday, thursday, friday, saturday]
  /// where each day is an object `{ times: { start: datestring, end: datestring }[] }`
  virtualAvailability Json

  topics String[]

  /// 1-5 as 1-500 (e.g. 3.5 = 350)
  tutorScore Int?
  /// 1-5 as 1-500 (e.g. 3.5 = 350)
  tuteeScore Int?

  tutoring Session[] @relation("tutor")
  tuteeing Session[] @relation("tutee")

  experiences Experience[]

  credential Credential?
}

model Credential {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  refreshToken String
}

model Experience {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  title       String
  description String
  skills      String[]
  imageId     String?
  image       Storage? @relation("experience", fields: [imageId], references: [id])
}

enum School {
  AAHS
  AIT
  APA
  MHS
  UCTECH
}

enum AvailabilityMergeType {
  AND
  OR
}

model Storage {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  name String
  type String
  data Bytes

  avatar     User[]       @relation("avatar")
  banner     User[]       @relation("banner")
  experience Experience[] @relation("experience")
}

model Nonce {
  nonce   String   @id
  created DateTime @default(now())
  expires DateTime
}

model Session {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  type     SessionType
  status   SessionStatus
  location String?
  date     DateTime

  tutor           User        @relation("tutor", fields: [tutorId], references: [id])
  tutorId         String
  tutorAttendance Attendance?
  tutorRating     Int?
  tutorNotes      String?

  tutee           User        @relation("tutee", fields: [tuteeId], references: [id])
  tuteeId         String
  tuteeAttendance Attendance?
  tuteeRating     Int?
  tuteeNotes      String?
}

enum SessionType {
  Campus
  Virtual
  // Chat
}

enum SessionStatus {
  AwaitingTutorApproval
  AwaitingTuteeApproval
  Declined
  Confirmed
  Completed
  Canceled
}

enum Attendance {
  Present
  Late
  Excused
  NoShow
  Canceled
}
