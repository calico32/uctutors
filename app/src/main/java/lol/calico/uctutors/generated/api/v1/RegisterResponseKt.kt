// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api/v1/auth.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package lol.calico.uctutors.generated.api.v1;

@kotlin.jvm.JvmName("-initializeregisterResponse")
public inline fun registerResponse(block: lol.calico.uctutors.generated.api.v1.RegisterResponseKt.Dsl.() -> kotlin.Unit): lol.calico.uctutors.generated.api.v1.RegisterResponse =
  lol.calico.uctutors.generated.api.v1.RegisterResponseKt.Dsl._create(lol.calico.uctutors.generated.api.v1.RegisterResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `api.v1.RegisterResponse`
 */
public object RegisterResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: lol.calico.uctutors.generated.api.v1.RegisterResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: lol.calico.uctutors.generated.api.v1.RegisterResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): lol.calico.uctutors.generated.api.v1.RegisterResponse = _builder.build()

    /**
     * `string user_id = 1 [json_name = "userId"];`
     */
    public var userId: kotlin.String
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * `string user_id = 1 [json_name = "userId"];`
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun lol.calico.uctutors.generated.api.v1.RegisterResponse.copy(block: `lol.calico.uctutors.generated.api.v1`.RegisterResponseKt.Dsl.() -> kotlin.Unit): lol.calico.uctutors.generated.api.v1.RegisterResponse =
  `lol.calico.uctutors.generated.api.v1`.RegisterResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

